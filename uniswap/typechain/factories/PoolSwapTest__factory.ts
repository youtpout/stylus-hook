/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { PoolSwapTest, PoolSwapTestInterface } from "../PoolSwapTest";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_manager",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "manager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "swap",
    inputs: [
      {
        name: "key",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "params",
        type: "tuple",
        internalType: "struct IPoolManager.SwapParams",
        components: [
          {
            name: "zeroForOne",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "amountSpecified",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "sqrtPriceLimitX96",
            type: "uint160",
            internalType: "uint160",
          },
        ],
      },
      {
        name: "testSettings",
        type: "tuple",
        internalType: "struct PoolSwapTest.TestSettings",
        components: [
          {
            name: "withdrawTokens",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "settleUsingTransfer",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "currencyAlreadySent",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "hookData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "delta",
        type: "int256",
        internalType: "BalanceDelta",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "unlockCallback",
    inputs: [
      {
        name: "rawData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "ERC20TransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "NativeTransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSwapOccurred",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161182238038061182283398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161173e6100e460003960008181604b0152818160dc015281816101f9015281816103180152818161073501528181610809015281816109e101528181610a2f01528181610b1801528181610bd401528181610c9d01528181610d0c01528181610e610152610ec4015261173e6000f3fe6080604052600436106100345760003560e01c8063481c6a75146100395780636646135b1461008a57806391dd7346146100ab575b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61009d610098366004611234565b6100d8565b604051908152602001610081565b3480156100b757600080fd5b506100cb6100c63660046112a9565b6101ec565b604051610081919061136b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166348c894916040518060a00160405280336001600160a01b031681526020018681526020018881526020018781526020018581525060405160200161014991906113c8565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610174919061136b565b6000604051808303816000875af1158015610193573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101bb9190810190611465565b8060200190518101906101ce91906114dc565b90504780156101e3576101e360003383610919565b50949350505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461022357600080fd5b6000610231838501856114f5565b905060008061024d8360400151600001518460000151306109b9565b925092505060008061026c8560400151602001518660000151306109b9565b9250925050826000146102c65760405162461bcd60e51b815260206004820152601e60248201527f64656c74614265666f726530206973206e6f7420657175616c20746f2030000060448201526064015b60405180910390fd5b80156103145760405162461bcd60e51b815260206004820152601e60248201527f64656c74614265666f726531206973206e6f7420657175616c20746f2030000060448201526064016102bd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f3cd914c8760400151886060015189608001516040518463ffffffff1660e01b8152600401610372939291906115ae565b6020604051808303816000875af1158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b591906114dc565b90506000806103d18860400151600001518960000151306109b9565b92509250506000806103f08a60400151602001518b60000151306109b9565b92509250508389146104615760405162461bcd60e51b815260206004820152603460248201527f706f6f6c42616c616e63654265666f726530206973206e6f7420657175616c206044820152730746f20706f6f6c42616c616e63654166746572360641b60648201526084016102bd565b8187146104cd5760405162461bcd60e51b815260206004820152603460248201527f706f6f6c42616c616e63654265666f726531206973206e6f7420657175616c20604482015273746f20706f6f6c42616c616e636541667465723160601b60648201526084016102bd565b60608a015151156105f05760008a6060015160200151121561056f5789606001516020015183146105105760405162461bcd60e51b81526004016102bd90611600565b6000811361056a5760405162461bcd60e51b815260206004820152602160248201527f64656c7461416674657231206973206e6f742067726561746572207468616e206044820152600360fc1b60648201526084016102bd565b6106f9565b600083126105c95760405162461bcd60e51b815260206004820152602160248201527f64656c7461416674657230206973206e6f74206c657373207468616e207a65726044820152606f60f81b60648201526084016102bd565b896060015160200151811461056a5760405162461bcd60e51b81526004016102bd90611657565b60008a606001516020015112156106825789606001516020015181146106285760405162461bcd60e51b81526004016102bd90611657565b6000831361056a5760405162461bcd60e51b815260206004820152602160248201527f64656c7461416674657230206973206e6f742067726561746572207468616e206044820152600360fc1b60648201526084016102bd565b600081126106d25760405162461bcd60e51b815260206004820152601e60248201527f64656c7461416674657231206973206e6f74206c657373207468616e2030000060448201526064016102bd565b89606001516020015183146106f95760405162461bcd60e51b81526004016102bd90611600565b60008312156107ca57896020015160400151156107aa5760408a810151519051636a256b2960e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000090911690636a256b29906024016020604051808303816000875af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a491906114dc565b506107ca565b6107ca8a60400151600001518b60000151858d6020015160200151610aa7565b600081121561089e578960200151604001511561087e5760408a810151602001519051636a256b2960e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000090911690636a256b29906024016020604051808303816000875af1158015610854573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087891906114dc565b5061089e565b61089e8a60400151602001518b60000151838d6020015160200151610aa7565b60008313156108c25760408a0151518a5160208c0151516108c29291908690610dd2565b60008113156108eb576108eb8a60400151602001518b60000151838d6020015160000151610dd2565b6040805160208101879052016040516020818303038152906040529a50505050505050505050505b92915050565b60006001600160a01b0384166109585760008060008085875af190508061095357604051633d2cec6f60e21b815260040160405180910390fd5b6109b3565b60405163a9059cbb60e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806109b357604051633c9fd93960e21b815260040160405180910390fd5b50505050565b600080806109d06001600160a01b03871686610f4b565b9250610a056001600160a01b0387167f0000000000000000000000000000000000000000000000000000000000000000610f4b565b60405163a54b283160e01b81526001600160a01b03868116600483015288811660248301529193507f00000000000000000000000000000000000000000000000000000000000000009091169063a54b283190604401602060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c91906114dc565b905093509350939050565b600082600f0b12610afa5760405162461bcd60e51b815260206004820152601c60248201527f616d6f756e74206973206e6f74206c657373207468616e207a65726f0000000060448201526064016102bd565b8015610d0a576001600160a01b038416610bc2576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016636a256b29610b46846116ae565b6040516001600160e01b031960e084901b1681526001600160a01b03881660048201526001600160801b03919091169060240160206040518083038185885af1158015610b97573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610bbc91906114dc565b506109b3565b6001600160a01b0384166323b872dd847f0000000000000000000000000000000000000000000000000000000000000000610bfc866116ae565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526001600160801b031660448201526064016020604051808303816000875af1158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d91906116eb565b50604051636a256b2960e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303816000875af1158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc91906114dc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f5298aca84610d53876001600160a01b03166001600160a01b031690565b610d5c866116ae565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526001600160801b031660448201526064015b600060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b5050505050505050565b600082600f0b13610e255760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e74206973206e6f742067726561746572207468616e207a65726f0060448201526064016102bd565b8015610ec257604051630b0d9c0960e01b81526001600160a01b03858116600483015284811660248301526001600160801b03841660448301527f00000000000000000000000000000000000000000000000000000000000000001690630b0d9c0990606401600060405180830381600087803b158015610ea557600080fd5b505af1158015610eb9573d6000803e3d6000fd5b505050506109b3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663156e29f684610f0b876001600160a01b03166001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526001600160801b0385166044820152606401610d9a565b60006001600160a01b038316610f6c57506001600160a01b03811631610913565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906114dc565b9050610913565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561101657611016610fdd565b60405290565b6040516060810167ffffffffffffffff8111828210171561101657611016610fdd565b604051601f8201601f1916810167ffffffffffffffff8111828210171561106857611068610fdd565b604052919050565b6001600160a01b038116811461108557600080fd5b50565b600060a0828403121561109a57600080fd5b6110a2610ff3565b905081356110af81611070565b815260208201356110bf81611070565b6020820152604082013562ffffff811681146110da57600080fd5b60408201526060820135600281900b81146110f457600080fd5b6060820152608082013561110781611070565b608082015292915050565b801515811461108557600080fd5b60006060828403121561113257600080fd5b61113a61101c565b9050813561114781611112565b815260208281013590820152604082013561116181611070565b604082015292915050565b60006060828403121561117e57600080fd5b61118661101c565b9050813561119381611112565b815260208201356111a381611112565b6020820152604082013561116181611112565b600067ffffffffffffffff8211156111d0576111d0610fdd565b50601f01601f191660200190565b600082601f8301126111ef57600080fd5b81356112026111fd826111b6565b61103f565b81815284602083860101111561121757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080610180858703121561124b57600080fd5b6112558686611088565b93506112648660a08701611120565b925061127486610100870161116c565b915061016085013567ffffffffffffffff81111561129157600080fd5b61129d878288016111de565b91505092959194509250565b600080602083850312156112bc57600080fd5b823567ffffffffffffffff808211156112d457600080fd5b818501915085601f8301126112e857600080fd5b8135818111156112f757600080fd5b86602082850101111561130957600080fd5b60209290920196919550909350505050565b60005b8381101561133657818101518382015260200161131e565b50506000910152565b6000815180845261135781602086016020860161131b565b601f01601f19169290920160200192915050565b60208152600061137e602083018461133f565b9392505050565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff169084015260608083015160020b9084015260809182015116910152565b602080825282516001600160a01b031682820152828101518051151560408085019190915291810151151560608401528101511515608083015282015160009061141560a0840182611385565b506060830151805115156101408401526020810151610160840152604001516001600160a01b031661018083015260808301516101a08084015261145d6101c084018261133f565b949350505050565b60006020828403121561147757600080fd5b815167ffffffffffffffff81111561148e57600080fd5b8201601f8101841361149f57600080fd5b80516114ad6111fd826111b6565b8181528560208385010111156114c257600080fd5b6114d382602083016020860161131b565b95945050505050565b6000602082840312156114ee57600080fd5b5051919050565b60006020828403121561150757600080fd5b813567ffffffffffffffff8082111561151f57600080fd5b908301906101a0828603121561153457600080fd5b61153c610ff3565b823561154781611070565b8152611556866020850161116c565b60208201526115688660808501611088565b604082015261157b866101208501611120565b60608201526101808301358281111561159357600080fd5b61159f878286016111de565b60808301525095945050505050565b60006101206115bd8387611385565b8451151560a0840152602085015160c084015260408501516001600160a01b031660e0840152806101008401526115f68184018561133f565b9695505050505050565b60208082526037908201527f64656c7461416674657230206973206e6f7420657175616c20746f20646174616040820152760b9c185c985b5ccb985b5bdd5b9d14dc1958da599a5959604a1b606082015260800190565b60208082526037908201527f64656c7461416674657231206973206e6f7420657175616c20746f20646174616040820152760b9c185c985b5ccb985b5bdd5b9d14dc1958da599a5959604a1b606082015260800190565b600081600f0b6f7fffffffffffffffffffffffffffffff1981036116e257634e487b7160e01b600052601160045260246000fd5b60000392915050565b6000602082840312156116fd57600080fd5b815161137e8161111256fea26469706673582212205c9f06f440d39e878187701e0b7786cc2258fe81c5e9032a18c5cc9d66584dbe64736f6c63430008130033";

type PoolSwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolSwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PoolSwapTest__factory extends ContractFactory {
  constructor(...args: PoolSwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _manager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_manager, overrides || {});
  }
  override deploy(
    _manager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_manager, overrides || {}) as Promise<
      PoolSwapTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PoolSwapTest__factory {
    return super.connect(runner) as PoolSwapTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolSwapTestInterface {
    return new Interface(_abi) as PoolSwapTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PoolSwapTest {
    return new Contract(address, _abi, runner) as unknown as PoolSwapTest;
  }
}
