/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { PoolTakeTest, PoolTakeTestInterface } from "../PoolTakeTest";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_manager",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "manager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "take",
    inputs: [
      {
        name: "key",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "amount0",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amount1",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "unlockCallback",
    inputs: [
      {
        name: "rawData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "SafeCastOverflow",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610fec380380610fec83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610f1c6100d06000396000818160600152818161014d015281816101ff0152818161052801528181610576015281816106ab0152818161070e0152818161083a015281816108f6015281816109bf0152610a2e0152610f1c6000f3fe6080604052600436106100345760003560e01c8063055419b614610039578063481c6a751461004e57806391dd73461461009f575b600080fd5b61004c610047366004610c38565b6100cc565b005b34801561005a57600080fd5b506100827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ab57600080fd5b506100bf6100ba366004610c6c565b6101f2565b6040516100969190610d02565b60408051608080820183523380835260208084018881528486018881526060958601888152875180850195909552915180516001600160a01b03908116868a0152938101518416858801529687015162ffffff16848601529486015160020b60a08401529490920151821660c0820152915160e083015291516101008201527f0000000000000000000000000000000000000000000000000000000000000000909116906348c8949190610120016040516020818303038152906040526040518263ffffffff1660e01b81526004016101a59190610d02565b6000604051808303816000875af11580156101c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101ec9190810190610d35565b50505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461022957600080fd5b600061023783850185610de2565b60408101519091501561025c576020810151518151604083015161025c9291906102a6565b60608101511561028157610281816020015160200151826000015183606001516102a6565b6040805160006020820152016040516020818303038152906040529150505b92915050565b60008060006102b6868630610500565b925092509250806000146103115760405162461bcd60e51b815260206004820152601d60248201527f64656c74614265666f7265206973206e6f7420657175616c20746f203000000060448201526064015b60405180910390fd5b610326868661031f876105ee565b600161061c565b6000806000610336898930610500565b925092509250610345876105ee565b61034e90610e6b565b600f0b81146103b55760405162461bcd60e51b815260206004820152602d60248201527f64656c74614166746572206973206e6f7420657175616c20746f202d616d6f7560448201526c6e742e746f496e74313238282960981b6064820152608401610308565b866103c08785610e91565b146104485760405162461bcd60e51b815260206004820152604c60248201527f74686520646966666572656e6365206265747765656e207573657242616c416660448201527f74657220616e64207573657242616c4265666f7265206973206e6f742065717560648201526b185b081d1bc8185b5bdd5b9d60a21b608482015260a401610308565b866104538387610e91565b146104d75760405162461bcd60e51b815260206004820152604860248201527f74686520646966666572656e6365206265747765656e20706d42616c4265666f60448201527f726520616e6420706d42616c4166746572206973206e6f7420657175616c20746064820152671bc8185b5bdd5b9d60c21b608482015260a401610308565b6104f589896104e58a6105ee565b6104ee90610e6b565b60016107c9565b505050505050505050565b600080806105176001600160a01b03871686610ac0565b925061054c6001600160a01b0387167f0000000000000000000000000000000000000000000000000000000000000000610ac0565b60405163a54b283160e01b81526001600160a01b03868116600483015288811660248301529193507f00000000000000000000000000000000000000000000000000000000000000009091169063a54b283190604401602060405180830381865afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e39190610ea4565b905093509350939050565b600060016001607f1b03821115610618576040516393dafdf160e01b815260040160405180910390fd5b5090565b600082600f0b1361066f5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e74206973206e6f742067726561746572207468616e207a65726f006044820152606401610308565b801561070c57604051630b0d9c0960e01b81526001600160a01b03858116600483015284811660248301526001600160801b03841660448301527f00000000000000000000000000000000000000000000000000000000000000001690630b0d9c0990606401600060405180830381600087803b1580156106ef57600080fd5b505af1158015610703573d6000803e3d6000fd5b505050506101ec565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663156e29f684610755876001600160a01b03166001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526001600160801b03851660448201526064015b600060405180830381600087803b1580156107ab57600080fd5b505af11580156107bf573d6000803e3d6000fd5b5050505050505050565b600082600f0b1261081c5760405162461bcd60e51b815260206004820152601c60248201527f616d6f756e74206973206e6f74206c657373207468616e207a65726f000000006044820152606401610308565b8015610a2c576001600160a01b0384166108e4576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016636a256b2961086884610e6b565b6040516001600160e01b031960e084901b1681526001600160a01b03881660048201526001600160801b03919091169060240160206040518083038185885af11580156108b9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108de9190610ea4565b506101ec565b6001600160a01b0384166323b872dd847f000000000000000000000000000000000000000000000000000000000000000061091e86610e6b565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526001600160801b031660448201526064016020604051808303816000875af115801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190610ebd565b50604051636a256b2960e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303816000875af1158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de9190610ea4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f5298aca84610a75876001600160a01b03166001600160a01b031690565b610a7e86610e6b565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526001600160801b03166044820152606401610791565b60006001600160a01b038316610ae157506001600160a01b038116316102a0565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190610ea4565b90506102a0565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b7d57600080fd5b50565b8035610b8b81610b68565b919050565b600060a08284031215610ba257600080fd5b60405160a0810181811067ffffffffffffffff82111715610bc557610bc5610b52565b6040529050808235610bd681610b68565b81526020830135610be681610b68565b6020820152604083013562ffffff81168114610c0157600080fd5b60408201526060830135600281900b8114610c1b57600080fd5b6060820152610c2c60808401610b80565b60808201525092915050565b600080600060e08486031215610c4d57600080fd5b610c578585610b90565b9560a0850135955060c0909401359392505050565b60008060208385031215610c7f57600080fd5b823567ffffffffffffffff80821115610c9757600080fd5b818501915085601f830112610cab57600080fd5b813581811115610cba57600080fd5b866020828501011115610ccc57600080fd5b60209290920196919550909350505050565b60005b83811015610cf9578181015183820152602001610ce1565b50506000910152565b6020815260008251806020840152610d21816040850160208701610cde565b601f01601f19169190910160400192915050565b600060208284031215610d4757600080fd5b815167ffffffffffffffff80821115610d5f57600080fd5b818401915084601f830112610d7357600080fd5b815181811115610d8557610d85610b52565b604051601f8201601f19908116603f01168101908382118183101715610dad57610dad610b52565b81604052828152876020848701011115610dc657600080fd5b610dd7836020830160208801610cde565b979650505050505050565b60006101008284031215610df557600080fd5b6040516080810181811067ffffffffffffffff82111715610e1857610e18610b52565b6040528235610e2681610b68565b8152610e358460208501610b90565b602082015260c0830135604082015260e090920135606083015250919050565b634e487b7160e01b600052601160045260246000fd5b600081600f0b60016001607f1b03198103610e8857610e88610e55565b60000392915050565b818103818111156102a0576102a0610e55565b600060208284031215610eb657600080fd5b5051919050565b600060208284031215610ecf57600080fd5b81518015158114610edf57600080fd5b939250505056fea2646970667358221220b6c6d2c864860a7e8fbb523c405192bdcb11c8f4bc5b84ba1e677fcabfd3368f64736f6c63430008130033";

type PoolTakeTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolTakeTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PoolTakeTest__factory extends ContractFactory {
  constructor(...args: PoolTakeTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _manager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_manager, overrides || {});
  }
  override deploy(
    _manager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_manager, overrides || {}) as Promise<
      PoolTakeTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PoolTakeTest__factory {
    return super.connect(runner) as PoolTakeTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolTakeTestInterface {
    return new Interface(_abi) as PoolTakeTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PoolTakeTest {
    return new Contract(address, _abi, runner) as unknown as PoolTakeTest;
  }
}
