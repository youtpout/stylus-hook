/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SwapScript,
  SwapScriptInterface,
} from "../../03_Swap.s.sol/SwapScript";

const _abi = [
  {
    type: "function",
    name: "IS_SCRIPT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MAX_PRICE_LIMIT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MIN_PRICE_LIMIT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "run",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x60806040526004805460ff19166001179055600c8054744aa4365da82acd46e378a6f3c92a863f3e763d34016001600160a81b031990911617905534801561004657600080fd5b50610602806100566000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063542524dd14610051578063c040622614610076578063c7b8e15d14610080578063f8ccbf4714610088575b600080fd5b6100596100a5565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e6100c7565b005b610059610433565b600c546100959060ff1681565b604051901515815260200161006d565b6100c4600173fffd8963efd1fc6a506488495d951d5263988d26610459565b81565b60405163ce817d4760e01b81527f012345678901234567890123456789012345678901234567890123456789012360048201819052907314791697260e4c9a71f18484c9f997b308e5932590737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d4790602401600060405180830381600087803b15801561014c57600080fd5b505af1158015610160573d6000803e3d6000fd5b50506040805160a081018252732dc942dcba13e4be27721980fe01f2221610a93b80825273fb9a956c4875826a76d47c360234fc1633c078a860208301819052610bb8838501819052603c60608501819052732b02abf3572e805547a7029f304aa6bbf6e0031f6080860152600c54955163095ea7b360e01b81526101009096046001600160a01b03166004870152600019602487015292965090945092909190859063095ea7b3906044016020604051808303816000875af115801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610480565b50600c5460405163095ea7b360e01b81526101009091046001600160a01b039081166004830152600019602483015285169063095ea7b3906044016020604051808303816000875af11580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190610480565b5060408051606081018252600180825268056bc75e2d631000006020830152916000919081016103036401000276a360016104a9565b6001600160a01b039081169091526040805160608101825260018082526020808301919091526000828401819052835190815290810192839052600c54636646135b60e01b909352939450929161010090910416636646135b61036c878686866024810161050f565b6020604051808303816000875af115801561038b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103af91906105b3565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561040e57600080fd5b505af1158015610422573d6000803e3d6000fd5b505050505050505050505050505050565b6100c46401000276a360016104a9565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111561047957610479610443565b5092915050565b60006020828403121561049257600080fd5b815180151581146104a257600080fd5b9392505050565b6001600160a01b0381811683821601908082111561047957610479610443565b6000815180845260005b818110156104ef576020818501810151868301820152016104d3565b506000602082860101526020601f19601f83011685010191505092915050565b84516001600160a01b03908116825260208087015182168184015260408088015162ffffff168185015260608089015160020b908501526080808901518416908501528651151560a08501528682015160c08501528681015190921660e084015284511515610100840152840151151561012083015283015115156101408201526000610180806101608401526105a8818401856104c9565b979650505050505050565b6000602082840312156105c557600080fd5b505191905056fea264697066735822122094dd2cb354c5a0442faa82df12377de9f7f449d7bf70b53e338c92cd26c3b8ae64736f6c63430008130033";

type SwapScriptConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapScriptConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapScript__factory extends ContractFactory {
  constructor(...args: SwapScriptConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SwapScript & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapScript__factory {
    return super.connect(runner) as SwapScript__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapScriptInterface {
    return new Interface(_abi) as SwapScriptInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SwapScript {
    return new Contract(address, _abi, runner) as unknown as SwapScript;
  }
}
