/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  PoolModifyLiquidityTest,
  PoolModifyLiquidityTestInterface,
} from "../PoolModifyLiquidityTest";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_manager",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "manager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "modifyLiquidity",
    inputs: [
      {
        name: "key",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "params",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
        ],
      },
      {
        name: "hookData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "settleUsingTransfer",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "withdrawTokens",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "delta",
        type: "int256",
        internalType: "BalanceDelta",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "modifyLiquidity",
    inputs: [
      {
        name: "key",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "params",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
        ],
      },
      {
        name: "hookData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "delta",
        type: "int256",
        internalType: "BalanceDelta",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "unlockCallback",
    inputs: [
      {
        name: "rawData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "ERC20TransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "NativeTransferFailed",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161136b38038061136b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516112956100d660003960008181607c0152818160fa01528181610222015281816102600152818161056a015281816105b8015281816106a6015281816107620152818161082b0152818161089a015281816109ef0152610a5201526112956000f3fe60806040526004361061003f5760003560e01c8063350a355414610044578063481c6a751461006a57806391dd7346146100b6578063bec999dd146100e3575b600080fd5b610057610052366004610dab565b6100f6565b6040519081526020015b60405180910390f35b34801561007657600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610061565b3480156100c257600080fd5b506100d66100d1366004610e37565b610215565b6040516100619190610ef9565b6100576100f1366004610f13565b61048a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166348c894916040518060c00160405280336001600160a01b0316815260200189815260200188815260200187815260200186151581526020018515158152506040516020016101719190610fb8565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161019c9190610ef9565b6000604051808303816000875af11580156101bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e39190810190611047565b8060200190518101906101f691906110be565b905047801561020b5761020b600033836104a2565b5095945050505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461024c57600080fd5b600061025a838501856110d7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bec999dd8360200151846040015185606001516040518463ffffffff1660e01b81526004016102ba939291906111a1565b6020604051808303816000875af11580156102d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fd91906110be565b90506000610318836020015160000151846000015130610542565b925050506000610335846020015160200151856000015130610542565b92505050600084604001516040015112156103865760008213806103595750600081135b610365576103656111ef565b60008212806103745750600081125b15610381576103816111ef565b6103ce565b600084604001516040015113156103ce5760008212806103a65750600081125b6103b2576103b26111ef565b60008213806103c15750600081135b156103ce576103ce6111ef565b60008212156103f3576103f38460200151600001518560000151848760800151610630565b6000811215610418576104188460200151602001518560000151838760800151610630565b600082131561043d5761043d8460200151600001518560000151848760a00151610960565b6000811315610462576104628460200151602001518560000151838760a00151610960565b6040805160208101859052016040516020818303038152906040529450505050505b92915050565b600061049a8484846001806100f6565b949350505050565b60006001600160a01b0384166104e15760008060008085875af19050806104dc57604051633d2cec6f60e21b815260040160405180910390fd5b61053c565b60405163a9059cbb60e01b6000528360045282602452602060006044600080895af13d15601f3d116001600051141617169150600060605280604052508061053c57604051633c9fd93960e21b815260040160405180910390fd5b50505050565b600080806105596001600160a01b03871686610ad9565b925061058e6001600160a01b0387167f0000000000000000000000000000000000000000000000000000000000000000610ad9565b60405163a54b283160e01b81526001600160a01b03868116600483015288811660248301529193507f00000000000000000000000000000000000000000000000000000000000000009091169063a54b283190604401602060405180830381865afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062591906110be565b905093509350939050565b600082600f0b126106885760405162461bcd60e51b815260206004820152601c60248201527f616d6f756e74206973206e6f74206c657373207468616e207a65726f0000000060448201526064015b60405180910390fd5b8015610898576001600160a01b038416610750576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016636a256b296106d484611205565b6040516001600160e01b031960e084901b1681526001600160a01b03881660048201526001600160801b03919091169060240160206040518083038185885af1158015610725573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061074a91906110be565b5061053c565b6001600160a01b0384166323b872dd847f000000000000000000000000000000000000000000000000000000000000000061078a86611205565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526001600160801b031660448201526064016020604051808303816000875af11580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190611242565b50604051636a256b2960e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303816000875af1158015610874573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a91906110be565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f5298aca846108e1876001600160a01b03166001600160a01b031690565b6108ea86611205565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526001600160801b031660448201526064015b600060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b5050505050505050565b600082600f0b136109b35760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e74206973206e6f742067726561746572207468616e207a65726f00604482015260640161067f565b8015610a5057604051630b0d9c0960e01b81526001600160a01b03858116600483015284811660248301526001600160801b03841660448301527f00000000000000000000000000000000000000000000000000000000000000001690630b0d9c0990606401600060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b5050505061053c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663156e29f684610a99876001600160a01b03166001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526001600160801b0385166044820152606401610928565b60006001600160a01b038316610afa57506001600160a01b03811631610484565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906110be565b9050610484565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610ba457610ba4610b6b565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bd357610bd3610b6b565b604052919050565b6001600160a01b0381168114610bf057600080fd5b50565b8035600281900b8114610c0557600080fd5b919050565b600060a08284031215610c1c57600080fd5b60405160a0810181811067ffffffffffffffff82111715610c3f57610c3f610b6b565b6040529050808235610c5081610bdb565b81526020830135610c6081610bdb565b6020820152604083013562ffffff81168114610c7b57600080fd5b6040820152610c8c60608401610bf3565b60608201526080830135610c9f81610bdb565b6080919091015292915050565b600060608284031215610cbe57600080fd5b6040516060810181811067ffffffffffffffff82111715610ce157610ce1610b6b565b604052905080610cf083610bf3565b8152610cfe60208401610bf3565b6020820152604083013560408201525092915050565b600067ffffffffffffffff821115610d2e57610d2e610b6b565b50601f01601f191660200190565b600082601f830112610d4d57600080fd5b8135610d60610d5b82610d14565b610baa565b818152846020838601011115610d7557600080fd5b816020850160208301376000918101602001919091529392505050565b8015158114610bf057600080fd5b8035610c0581610d92565b60008060008060006101608688031215610dc457600080fd5b610dce8787610c0a565b9450610ddd8760a08801610cac565b935061010086013567ffffffffffffffff811115610dfa57600080fd5b610e0688828901610d3c565b935050610120860135610e1881610d92565b9150610140860135610e2981610d92565b809150509295509295909350565b60008060208385031215610e4a57600080fd5b823567ffffffffffffffff80821115610e6257600080fd5b818501915085601f830112610e7657600080fd5b813581811115610e8557600080fd5b866020828501011115610e9757600080fd5b60209290920196919550909350505050565b60005b83811015610ec4578181015183820152602001610eac565b50506000910152565b60008151808452610ee5816020860160208601610ea9565b601f01601f19169290920160200192915050565b602081526000610f0c6020830184610ecd565b9392505050565b60008060006101208486031215610f2957600080fd5b610f338585610c0a565b9250610f428560a08601610cac565b915061010084013567ffffffffffffffff811115610f5f57600080fd5b610f6b86828701610d3c565b9150509250925092565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff169084015260608083015160020b9084015260809182015116910152565b602080825282516001600160a01b031682820152820151600090610fdf6040840182610f75565b506040838101518051600290810b60e08601526020820151900b6101008501520151610120830152606083015161018061014084018190526110256101a0850183610ecd565b6080860151151561016086015260a09095015115159301929092525090919050565b60006020828403121561105957600080fd5b815167ffffffffffffffff81111561107057600080fd5b8201601f8101841361108157600080fd5b805161108f610d5b82610d14565b8181528560208385010111156110a457600080fd5b6110b5826020830160208601610ea9565b95945050505050565b6000602082840312156110d057600080fd5b5051919050565b6000602082840312156110e957600080fd5b813567ffffffffffffffff8082111561110157600080fd5b90830190610180828603121561111657600080fd5b61111e610b81565b823561112981610bdb565b81526111388660208501610c0a565b602082015261114a8660c08501610cac565b60408201526101208301358281111561116257600080fd5b61116e87828601610d3c565b6060830152506111816101408401610da0565b60808201526111936101608401610da0565b60a082015295945050505050565b60006101206111b08387610f75565b8451600290810b60a08501526020860151900b60c0840152604085015160e0840152806101008401526111e581840185610ecd565b9695505050505050565b634e487b7160e01b600052600160045260246000fd5b600081600f0b6f7fffffffffffffffffffffffffffffff19810361123957634e487b7160e01b600052601160045260246000fd5b60000392915050565b60006020828403121561125457600080fd5b8151610f0c81610d9256fea26469706673582212207f9d246b8e981bc7e4b85bfef809cd5f3c30081f0d4a056d89bb94203b889a1e64736f6c63430008130033";

type PoolModifyLiquidityTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolModifyLiquidityTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PoolModifyLiquidityTest__factory extends ContractFactory {
  constructor(...args: PoolModifyLiquidityTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _manager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_manager, overrides || {});
  }
  override deploy(
    _manager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_manager, overrides || {}) as Promise<
      PoolModifyLiquidityTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): PoolModifyLiquidityTest__factory {
    return super.connect(runner) as PoolModifyLiquidityTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolModifyLiquidityTestInterface {
    return new Interface(_abi) as PoolModifyLiquidityTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PoolModifyLiquidityTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as PoolModifyLiquidityTest;
  }
}
