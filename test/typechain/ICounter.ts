/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ICounterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAfterSwap"
      | "addBeforeAddLiquidity"
      | "addBeforeRemoveLiquidity"
      | "addBeforeSwap"
      | "afterSwapCount"
      | "beforeAddLiquidityCount"
      | "beforeRemoveLiquidityCount"
      | "beforeSwapCount"
      | "setHook"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAfterSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBeforeAddLiquidity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBeforeRemoveLiquidity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBeforeSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwapCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAddLiquidityCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveLiquidityCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwapCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHook",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAfterSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBeforeAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBeforeRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBeforeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterSwapCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAddLiquidityCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveLiquidityCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeSwapCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHook", data: BytesLike): Result;
}

export interface ICounter extends BaseContract {
  connect(runner?: ContractRunner | null): ICounter;
  waitForDeployment(): Promise<this>;

  interface: ICounterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAfterSwap: TypedContractMethod<[key: BytesLike], [void], "nonpayable">;

  addBeforeAddLiquidity: TypedContractMethod<
    [key: BytesLike],
    [void],
    "nonpayable"
  >;

  addBeforeRemoveLiquidity: TypedContractMethod<
    [key: BytesLike],
    [void],
    "nonpayable"
  >;

  addBeforeSwap: TypedContractMethod<[key: BytesLike], [void], "nonpayable">;

  afterSwapCount: TypedContractMethod<[pool_id: BytesLike], [bigint], "view">;

  beforeAddLiquidityCount: TypedContractMethod<
    [pool_id: BytesLike],
    [bigint],
    "view"
  >;

  beforeRemoveLiquidityCount: TypedContractMethod<
    [pool_id: BytesLike],
    [bigint],
    "view"
  >;

  beforeSwapCount: TypedContractMethod<[pool_id: BytesLike], [bigint], "view">;

  setHook: TypedContractMethod<[value: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAfterSwap"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBeforeAddLiquidity"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBeforeRemoveLiquidity"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBeforeSwap"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "afterSwapCount"
  ): TypedContractMethod<[pool_id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beforeAddLiquidityCount"
  ): TypedContractMethod<[pool_id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beforeRemoveLiquidityCount"
  ): TypedContractMethod<[pool_id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beforeSwapCount"
  ): TypedContractMethod<[pool_id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setHook"
  ): TypedContractMethod<[value: AddressLike], [void], "nonpayable">;

  filters: {};
}
