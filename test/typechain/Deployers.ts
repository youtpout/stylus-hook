/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DeployersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LIQ_PARAMS"
      | "MAX_PRICE_LIMIT"
      | "MIN_PRICE_LIMIT"
      | "REMOVE_LIQ_PARAMS"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LIQ_PARAMS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PRICE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_LIQ_PARAMS",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LIQ_PARAMS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRICE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_LIQ_PARAMS",
    data: BytesLike
  ): Result;
}

export interface Deployers extends BaseContract {
  connect(runner?: ContractRunner | null): Deployers;
  waitForDeployment(): Promise<this>;

  interface: DeployersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LIQ_PARAMS: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
      }
    ],
    "view"
  >;

  MAX_PRICE_LIMIT: TypedContractMethod<[], [bigint], "view">;

  MIN_PRICE_LIMIT: TypedContractMethod<[], [bigint], "view">;

  REMOVE_LIQ_PARAMS: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LIQ_PARAMS"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "MAX_PRICE_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PRICE_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REMOVE_LIQ_PARAMS"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
