/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export declare namespace IPoolManager {
  export type ModifyLiquidityParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
  };

  export type ModifyLiquidityParamsStructOutput = [
    tickLower: bigint,
    tickUpper: bigint,
    liquidityDelta: bigint
  ] & { tickLower: bigint; tickUpper: bigint; liquidityDelta: bigint };

  export type SwapParamsStruct = {
    zeroForOne: boolean;
    amountSpecified: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type SwapParamsStructOutput = [
    zeroForOne: boolean,
    amountSpecified: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    zeroForOne: boolean;
    amountSpecified: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export interface IHooksInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterAddLiquidity"
      | "afterDonate"
      | "afterInitialize"
      | "afterRemoveLiquidity"
      | "afterSwap"
      | "beforeAddLiquidity"
      | "beforeDonate"
      | "beforeInitialize"
      | "beforeRemoveLiquidity"
      | "beforeSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "afterAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
}

export interface IHooks extends BaseContract {
  connect(runner?: ContractRunner | null): IHooks;
  waitForDeployment(): Promise<this>;

  interface: IHooksInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  afterAddLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterDonate: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterInitialize: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      tick: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterRemoveLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterSwap: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeAddLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeDonate: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeInitialize: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeRemoveLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeSwap: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterAddLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterDonate"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterInitialize"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      tick: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterRemoveLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterSwap"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeAddLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeDonate"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeInitialize"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeRemoveLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.ModifyLiquidityParamsStruct,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeSwap"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      hookData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  filters: {};
}
