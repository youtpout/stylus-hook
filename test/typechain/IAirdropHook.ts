/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IAirdropHookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAfterSwap"
      | "amountToClaim(bytes32,address)"
      | "amountToClaim(bytes32,address,address)"
      | "calculateTokenAirdrop"
      | "claim"
      | "claimAirdrop"
      | "closeAirdrop"
      | "getTotalSwap"
      | "setHook"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAfterSwap",
    values: [BytesLike, AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "amountToClaim(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "amountToClaim(bytes32,address,address)",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenAirdrop",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claimAirdrop",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAirdrop",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHook",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAfterSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToClaim(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToClaim(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHook", data: BytesLike): Result;
}

export interface IAirdropHook extends BaseContract {
  connect(runner?: ContractRunner | null): IAirdropHook;
  waitForDeployment(): Promise<this>;

  interface: IAirdropHookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAfterSwap: TypedContractMethod<
    [
      pool_id: BytesLike,
      sender: AddressLike,
      zero_for_one: boolean,
      amount_specified: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "amountToClaim(bytes32,address)": TypedContractMethod<
    [pool_id: BytesLike, receiver: AddressLike],
    [bigint],
    "view"
  >;

  "amountToClaim(bytes32,address,address)": TypedContractMethod<
    [pool_id: BytesLike, token: AddressLike, receiver: AddressLike],
    [bigint],
    "view"
  >;

  calculateTokenAirdrop: TypedContractMethod<
    [
      amount_to_airdrop: BigNumberish,
      user_volume: BigNumberish,
      total_volume: BigNumberish,
      percent: BigNumberish
    ],
    [bigint],
    "view"
  >;

  claim: TypedContractMethod<[pool_id: BytesLike], [void], "nonpayable">;

  claimAirdrop: TypedContractMethod<
    [pool_id: BytesLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  closeAirdrop: TypedContractMethod<
    [pool_id: BytesLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  getTotalSwap: TypedContractMethod<
    [pool_id: BytesLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  setHook: TypedContractMethod<[value: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAfterSwap"
  ): TypedContractMethod<
    [
      pool_id: BytesLike,
      sender: AddressLike,
      zero_for_one: boolean,
      amount_specified: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "amountToClaim(bytes32,address)"
  ): TypedContractMethod<
    [pool_id: BytesLike, receiver: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "amountToClaim(bytes32,address,address)"
  ): TypedContractMethod<
    [pool_id: BytesLike, token: AddressLike, receiver: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTokenAirdrop"
  ): TypedContractMethod<
    [
      amount_to_airdrop: BigNumberish,
      user_volume: BigNumberish,
      total_volume: BigNumberish,
      percent: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[pool_id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimAirdrop"
  ): TypedContractMethod<
    [pool_id: BytesLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeAirdrop"
  ): TypedContractMethod<
    [pool_id: BytesLike, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTotalSwap"
  ): TypedContractMethod<
    [pool_id: BytesLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setHook"
  ): TypedContractMethod<[value: AddressLike], [void], "nonpayable">;

  filters: {};
}
