/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export declare namespace IPoolManager {
  export type ModifyLiquidityParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
  };

  export type ModifyLiquidityParamsStructOutput = [
    tickLower: bigint,
    tickUpper: bigint,
    liquidityDelta: bigint
  ] & { tickLower: bigint; tickUpper: bigint; liquidityDelta: bigint };

  export type SwapParamsStruct = {
    zeroForOne: boolean;
    amountSpecified: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type SwapParamsStructOutput = [
    zeroForOne: boolean,
    amountSpecified: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    zeroForOne: boolean;
    amountSpecified: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export declare namespace Hooks {
  export type PermissionsStruct = {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
  };

  export type PermissionsStructOutput = [
    beforeInitialize: boolean,
    afterInitialize: boolean,
    beforeAddLiquidity: boolean,
    afterAddLiquidity: boolean,
    beforeRemoveLiquidity: boolean,
    afterRemoveLiquidity: boolean,
    beforeSwap: boolean,
    afterSwap: boolean,
    beforeDonate: boolean,
    afterDonate: boolean
  ] & {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
  };
}

export interface LimitOrderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterAddLiquidity"
      | "afterDonate"
      | "afterInitialize"
      | "afterRemoveLiquidity"
      | "afterSwap"
      | "beforeAddLiquidity"
      | "beforeDonate"
      | "beforeInitialize"
      | "beforeRemoveLiquidity"
      | "beforeSwap"
      | "epochInfos"
      | "epochNext"
      | "epochs"
      | "getEpoch"
      | "getEpochLiquidity"
      | "getHookPermissions"
      | "getTickLowerLast"
      | "kill"
      | "lockAcquired"
      | "lockAcquiredKill"
      | "lockAcquiredPlace"
      | "lockAcquiredWithdraw"
      | "onERC1155Received"
      | "place"
      | "poolManager"
      | "tickLowerLasts"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Fill" | "Kill" | "Place" | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "afterAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "epochInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epochNext", values?: undefined): string;
  encodeFunctionData(functionFragment: "epochs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getEpoch",
    values: [PoolKeyStruct, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochLiquidity",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHookPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTickLowerLast",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kill",
    values: [PoolKeyStruct, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockAcquired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockAcquiredKill",
    values: [PoolKeyStruct, BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "lockAcquiredPlace",
    values: [PoolKeyStruct, BigNumberish, boolean, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockAcquiredWithdraw",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [PoolKeyStruct, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickLowerLasts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "afterAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochNext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHookPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickLowerLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockAcquired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockAcquiredKill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockAcquiredPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockAcquiredWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickLowerLasts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FillEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    key: PoolKeyStruct,
    tickLower: BigNumberish,
    zeroForOne: boolean
  ];
  export type OutputTuple = [
    epoch: bigint,
    key: PoolKeyStructOutput,
    tickLower: bigint,
    zeroForOne: boolean
  ];
  export interface OutputObject {
    epoch: bigint;
    key: PoolKeyStructOutput;
    tickLower: bigint;
    zeroForOne: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KillEvent {
  export type InputTuple = [
    owner: AddressLike,
    epoch: BigNumberish,
    key: PoolKeyStruct,
    tickLower: BigNumberish,
    zeroForOne: boolean,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    epoch: bigint,
    key: PoolKeyStructOutput,
    tickLower: bigint,
    zeroForOne: boolean,
    liquidity: bigint
  ];
  export interface OutputObject {
    owner: string;
    epoch: bigint;
    key: PoolKeyStructOutput;
    tickLower: bigint;
    zeroForOne: boolean;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlaceEvent {
  export type InputTuple = [
    owner: AddressLike,
    epoch: BigNumberish,
    key: PoolKeyStruct,
    tickLower: BigNumberish,
    zeroForOne: boolean,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    epoch: bigint,
    key: PoolKeyStructOutput,
    tickLower: bigint,
    zeroForOne: boolean,
    liquidity: bigint
  ];
  export interface OutputObject {
    owner: string;
    epoch: bigint;
    key: PoolKeyStructOutput;
    tickLower: bigint;
    zeroForOne: boolean;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    owner: AddressLike,
    epoch: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [owner: string, epoch: bigint, liquidity: bigint];
  export interface OutputObject {
    owner: string;
    epoch: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LimitOrder extends BaseContract {
  connect(runner?: ContractRunner | null): LimitOrder;
  waitForDeployment(): Promise<this>;

  interface: LimitOrderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  afterAddLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterDonate: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterInitialize: TypedContractMethod<
    [
      arg0: AddressLike,
      key: PoolKeyStruct,
      arg2: BigNumberish,
      tick: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterRemoveLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterSwap: TypedContractMethod<
    [
      arg0: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeAddLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeDonate: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeInitialize: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeRemoveLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeSwap: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  epochInfos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, string, bigint, bigint, bigint] & {
        filled: boolean;
        currency0: string;
        currency1: string;
        token0Total: bigint;
        token1Total: bigint;
        liquidityTotal: bigint;
      }
    ],
    "view"
  >;

  epochNext: TypedContractMethod<[], [bigint], "view">;

  epochs: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getEpoch: TypedContractMethod<
    [key: PoolKeyStruct, tickLower: BigNumberish, zeroForOne: boolean],
    [bigint],
    "view"
  >;

  getEpochLiquidity: TypedContractMethod<
    [epoch: BigNumberish, owner: AddressLike],
    [bigint],
    "view"
  >;

  getHookPermissions: TypedContractMethod<
    [],
    [Hooks.PermissionsStructOutput],
    "view"
  >;

  getTickLowerLast: TypedContractMethod<[poolId: BytesLike], [bigint], "view">;

  kill: TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      zeroForOne: boolean,
      to: AddressLike
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  lockAcquired: TypedContractMethod<[data: BytesLike], [string], "nonpayable">;

  lockAcquiredKill: TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      liquidityDelta: BigNumberish,
      to: AddressLike,
      removingAllLiquidity: boolean
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        amount0Fee: bigint;
        amount1Fee: bigint;
      }
    ],
    "nonpayable"
  >;

  lockAcquiredPlace: TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      zeroForOne: boolean,
      liquidityDelta: BigNumberish,
      owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  lockAcquiredWithdraw: TypedContractMethod<
    [
      currency0: AddressLike,
      currency1: AddressLike,
      token0Amount: BigNumberish,
      token1Amount: BigNumberish,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  place: TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      zeroForOne: boolean,
      liquidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  poolManager: TypedContractMethod<[], [string], "view">;

  tickLowerLasts: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  withdraw: TypedContractMethod<
    [epoch: BigNumberish, to: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterAddLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterDonate"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterInitialize"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      key: PoolKeyStruct,
      arg2: BigNumberish,
      tick: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterRemoveLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterSwap"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeAddLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeDonate"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeInitialize"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeRemoveLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeSwap"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "epochInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, string, bigint, bigint, bigint] & {
        filled: boolean;
        currency0: string;
        currency1: string;
        token0Total: bigint;
        token1Total: bigint;
        liquidityTotal: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochNext"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochs"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpoch"
  ): TypedContractMethod<
    [key: PoolKeyStruct, tickLower: BigNumberish, zeroForOne: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochLiquidity"
  ): TypedContractMethod<
    [epoch: BigNumberish, owner: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHookPermissions"
  ): TypedContractMethod<[], [Hooks.PermissionsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getTickLowerLast"
  ): TypedContractMethod<[poolId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "kill"
  ): TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      zeroForOne: boolean,
      to: AddressLike
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockAcquired"
  ): TypedContractMethod<[data: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "lockAcquiredKill"
  ): TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      liquidityDelta: BigNumberish,
      to: AddressLike,
      removingAllLiquidity: boolean
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        amount0Fee: bigint;
        amount1Fee: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockAcquiredPlace"
  ): TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      zeroForOne: boolean,
      liquidityDelta: BigNumberish,
      owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockAcquiredWithdraw"
  ): TypedContractMethod<
    [
      currency0: AddressLike,
      currency1: AddressLike,
      token0Amount: BigNumberish,
      token1Amount: BigNumberish,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "place"
  ): TypedContractMethod<
    [
      key: PoolKeyStruct,
      tickLower: BigNumberish,
      zeroForOne: boolean,
      liquidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tickLowerLasts"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [epoch: BigNumberish, to: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "Fill"
  ): TypedContractEvent<
    FillEvent.InputTuple,
    FillEvent.OutputTuple,
    FillEvent.OutputObject
  >;
  getEvent(
    key: "Kill"
  ): TypedContractEvent<
    KillEvent.InputTuple,
    KillEvent.OutputTuple,
    KillEvent.OutputObject
  >;
  getEvent(
    key: "Place"
  ): TypedContractEvent<
    PlaceEvent.InputTuple,
    PlaceEvent.OutputTuple,
    PlaceEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Fill(uint232,tuple,int24,bool)": TypedContractEvent<
      FillEvent.InputTuple,
      FillEvent.OutputTuple,
      FillEvent.OutputObject
    >;
    Fill: TypedContractEvent<
      FillEvent.InputTuple,
      FillEvent.OutputTuple,
      FillEvent.OutputObject
    >;

    "Kill(address,uint232,tuple,int24,bool,uint128)": TypedContractEvent<
      KillEvent.InputTuple,
      KillEvent.OutputTuple,
      KillEvent.OutputObject
    >;
    Kill: TypedContractEvent<
      KillEvent.InputTuple,
      KillEvent.OutputTuple,
      KillEvent.OutputObject
    >;

    "Place(address,uint232,tuple,int24,bool,uint128)": TypedContractEvent<
      PlaceEvent.InputTuple,
      PlaceEvent.OutputTuple,
      PlaceEvent.OutputObject
    >;
    Place: TypedContractEvent<
      PlaceEvent.InputTuple,
      PlaceEvent.OutputTuple,
      PlaceEvent.OutputObject
    >;

    "Withdraw(address,uint232,uint128)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
