/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  AirdropHookProxy,
  AirdropHookProxyInterface,
} from "../AirdropHookProxy";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_poolManager",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterAddLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
        ],
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterDonate",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterInitialize",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint160",
        internalType: "uint160",
      },
      {
        name: "",
        type: "int24",
        internalType: "int24",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterRemoveLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
        ],
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterSwap",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "key",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "swapParams",
        type: "tuple",
        internalType: "struct IPoolManager.SwapParams",
        components: [
          {
            name: "zeroForOne",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "amountSpecified",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "sqrtPriceLimitX96",
            type: "uint160",
            internalType: "uint160",
          },
        ],
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "amountToClaim",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "PoolId",
      },
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "beforeAddLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeDonate",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeInitialize",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint160",
        internalType: "uint160",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeRemoveLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeSwap",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.SwapParams",
        components: [
          {
            name: "zeroForOne",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "amountSpecified",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "sqrtPriceLimitX96",
            type: "uint160",
            internalType: "uint160",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "claimAirdrop",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "PoolId",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "closeAirdrop",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "PoolId",
      },
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getHookPermissions",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Hooks.Permissions",
        components: [
          {
            name: "beforeInitialize",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterInitialize",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeAddLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterAddLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeRemoveLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterRemoveLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeSwap",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterSwap",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeDonate",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterDonate",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "lockAcquired",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "poolManager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "error",
    name: "AirdropNotEnd",
    inputs: [],
  },
  {
    type: "error",
    name: "AlreadyClaimed",
    inputs: [],
  },
  {
    type: "error",
    name: "HookAddressNotValid",
    inputs: [
      {
        name: "hooks",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "HookNotImplemented",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPool",
    inputs: [],
  },
  {
    type: "error",
    name: "LockFailure",
    inputs: [],
  },
  {
    type: "error",
    name: "NotPoolManager",
    inputs: [],
  },
  {
    type: "error",
    name: "NotSelf",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000f2238038062000f2283398101604081905262000034916200023a565b6001600160a01b038116608052806200004d3062000055565b50506200026c565b6200010a81620001046040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152506040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052600160e0820152610100810182905261012081019190915290565b6200010d565b50565b805115156001609f1b83161515141580620001365750602081015115156001609e1b8316151514155b80620001505750604081015115156001609d1b8316151514155b806200016a5750606081015115156001609c1b8316151514155b80620001845750608081015115156001609b1b8316151514155b806200019e575060a081015115156001609a1b8316151514155b80620001b8575060c08101511515600160991b8316151514155b80620001d2575060e08101511515600160981b8316151514155b80620001ed57506101008101511515600160971b8316151514155b806200020857506101208101511515600160961b8316151514155b156200023657604051630732d7b560e51b81526001600160a01b038316600482015260240160405180910390fd5b5050565b6000602082840312156200024d57600080fd5b81516001600160a01b03811681146200026557600080fd5b9392505050565b608051610c936200028f600039600081816102a5015261047c0152610c936000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063ab6291fe11610097578063c3d5d4e611610066578063c3d5d4e6146101ce578063c4e833ce146101ea578063dc4c90d3146102a0578063e1b4af69146101dc57600080fd5b8063ab6291fe1461019b578063b47b2fb1146101bb578063b505b4ce146101ce578063b6a8b0fa146101dc57600080fd5b8063575e24b4116100d3578063575e24b41461011a578063659db8ee1461016c578063a6ab2a431461011a578063a910f80f1461018d57600080fd5b80631aa42e2c146101055780632b58404e1461011a5780632c4a8d641461014b5780633440d8201461015e575b600080fd5b6101186101133660046106e9565b6102df565b005b61012d61012836600461078c565b610357565b6040516001600160e01b031990911681526020015b60405180910390f35b610118610159366004610808565b610372565b61012d610128366004610821565b61017f61017a3660046106e9565b6103e0565b604051908152602001610142565b61012d610128366004610892565b6101ae6101a936600461091f565b61046f565b6040516101429190610961565b61012d6101c93660046109af565b610557565b61012d6101283660046109af565b61012d610128366004610a17565b6102936040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152506040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052600160e0820152610100810182905261012081019190915290565b6040516101429190610a76565b6102c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610142565b6040516306a90b8b60e21b8152600481018390526001600160a01b0382166024820152738cde56336e289c028c8f7cf5c20283ff0227218290631aa42e2c90604401600060405180830381600087803b15801561033b57600080fd5b505af115801561034f573d6000803e3d6000fd5b505050505050565b6000604051630a85dc2960e01b815260040160405180910390fd5b60405163c9ec0fad60e01b815260048101829052336024820152738cde56336e289c028c8f7cf5c20283ff022721829063c9ec0fad90604401600060405180830381600087803b1580156103c557600080fd5b505af11580156103d9573d6000803e3d6000fd5b5050505050565b6040516332cedc7760e11b8152600481018390526001600160a01b0382166024820152600090738cde56336e289c028c8f7cf5c20283ff022721829063659db8ee90604401602060405180830381865afa158015610442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190610b2e565b90505b92915050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104ba5760405163570c108560e11b815260040160405180910390fd5b600080306001600160a01b031685856040516104d7929190610b47565b6000604051808303816000865af19150503d8060008114610514576040519150601f19603f3d011682016040523d82523d6000602084013e610519565b606091505b5091509150811561052d5791506104699050565b805160000361054f576040516314815f4760e31b815260040160405180910390fd5b805160208201fd5b6000328161057261056d368a90038a018a610b6a565b61064b565b90506000808860200135131561058d5750602087013561059d565b61059a6020890135610c0a565b90505b738cde56336e289c028c8f7cf5c20283ff0227218263ee00c26683856105c660208d018d610c34565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301521515604482015260648101849052608401600060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b5063b47b2fb160e01b9d9c50505050505050505050505050565b6000816040516020016106a4919081516001600160a01b03908116825260208084015182169083015260408084015162ffffff169083015260608084015160020b90830152608092830151169181019190915260a00190565b604051602081830303815290604052805190602001209050919050565b6001600160a01b03811681146106d657600080fd5b50565b80356106e4816106c1565b919050565b600080604083850312156106fc57600080fd5b82359150602083013561070e816106c1565b809150509250929050565b600060a0828403121561072b57600080fd5b50919050565b60006060828403121561072b57600080fd5b60008083601f84011261075557600080fd5b50813567ffffffffffffffff81111561076d57600080fd5b60208301915083602082850101111561078557600080fd5b9250929050565b600080600080600061014086880312156107a557600080fd5b85356107b0816106c1565b94506107bf8760208801610719565b93506107ce8760c08801610731565b925061012086013567ffffffffffffffff8111156107eb57600080fd5b6107f788828901610743565b969995985093965092949392505050565b60006020828403121561081a57600080fd5b5035919050565b6000806000806000610100868803121561083a57600080fd5b8535610845816106c1565b94506108548760208801610719565b935060c0860135610864816106c1565b925060e086013567ffffffffffffffff8111156107eb57600080fd5b8035600281900b81146106e457600080fd5b60008060008060008061012087890312156108ac57600080fd5b86356108b7816106c1565b95506108c68860208901610719565b945060c08701356108d6816106c1565b93506108e460e08801610880565b925061010087013567ffffffffffffffff81111561090157600080fd5b61090d89828a01610743565b979a9699509497509295939492505050565b6000806020838503121561093257600080fd5b823567ffffffffffffffff81111561094957600080fd5b61095585828601610743565b90969095509350505050565b600060208083528351808285015260005b8181101561098e57858101830151858201604001528201610972565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060008060008061016087890312156109c957600080fd5b86356109d4816106c1565b95506109e38860208901610719565b94506109f28860c08901610731565b9350610120870135925061014087013567ffffffffffffffff81111561090157600080fd5b6000806000806000806101208789031215610a3157600080fd5b8635610a3c816106c1565b9550610a4b8860208901610719565b945060c0870135935060e0870135925061010087013567ffffffffffffffff81111561090157600080fd5b81511515815261014081016020830151610a94602084018215159052565b506040830151610aa8604084018215159052565b506060830151610abc606084018215159052565b506080830151610ad0608084018215159052565b5060a0830151610ae460a084018215159052565b5060c0830151610af860c084018215159052565b5060e0830151610b0c60e084018215159052565b5061010083810151151590830152610120928301511515929091019190915290565b600060208284031215610b4057600080fd5b5051919050565b8183823760009101908152919050565b803562ffffff811681146106e457600080fd5b600060a08284031215610b7c57600080fd5b60405160a0810181811067ffffffffffffffff82111715610bad57634e487b7160e01b600052604160045260246000fd5b6040528235610bbb816106c1565b81526020830135610bcb816106c1565b6020820152610bdc60408401610b57565b6040820152610bed60608401610880565b6060820152610bfe608084016106d9565b60808201529392505050565b6000600160ff1b8201610c2d57634e487b7160e01b600052601160045260246000fd5b5060000390565b600060208284031215610c4657600080fd5b81358015158114610c5657600080fd5b939250505056fea2646970667358221220f11e0e082d8f812317165ada346547032a0e0123ef9da02cc23ebdcb52041c7864736f6c63430008130033";

type AirdropHookProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AirdropHookProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AirdropHookProxy__factory extends ContractFactory {
  constructor(...args: AirdropHookProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _poolManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_poolManager, overrides || {});
  }
  override deploy(
    _poolManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_poolManager, overrides || {}) as Promise<
      AirdropHookProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AirdropHookProxy__factory {
    return super.connect(runner) as AirdropHookProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AirdropHookProxyInterface {
    return new Interface(_abi) as AirdropHookProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AirdropHookProxy {
    return new Contract(address, _abi, runner) as unknown as AirdropHookProxy;
  }
}
