/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { ProtocolFees, ProtocolFeesInterface } from "../ProtocolFees";

const _abi = [
  {
    type: "function",
    name: "MIN_PROTOCOL_FEE_DENOMINATOR",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "collectProtocolFees",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "currency",
        type: "address",
        internalType: "Currency",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "amountCollected",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "protocolFeeController",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IProtocolFeeController",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "protocolFeesAccrued",
    inputs: [
      {
        name: "currency",
        type: "address",
        internalType: "Currency",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setOwner",
    inputs: [
      {
        name: "_owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setProtocolFeeController",
    inputs: [
      {
        name: "controller",
        type: "address",
        internalType: "contract IProtocolFeeController",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "OwnerChanged",
    inputs: [
      {
        name: "oldOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ProtocolFeeControllerUpdated",
    inputs: [
      {
        name: "protocolFeeController",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ERC20TransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "FeeNotDynamic",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidCaller",
    inputs: [],
  },
  {
    type: "error",
    name: "NativeTransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "ProtocolFeeCannotBeFetched",
    inputs: [],
  },
  {
    type: "error",
    name: "ProtocolFeeControllerCallFailedOrInvalidResult",
    inputs: [],
  },
] as const;

export class ProtocolFees__factory {
  static readonly abi = _abi;
  static createInterface(): ProtocolFeesInterface {
    return new Interface(_abi) as ProtocolFeesInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProtocolFees {
    return new Contract(address, _abi, runner) as unknown as ProtocolFees;
  }
}
