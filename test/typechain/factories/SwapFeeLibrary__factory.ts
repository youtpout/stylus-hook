/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SwapFeeLibrary,
  SwapFeeLibraryInterface,
} from "../SwapFeeLibrary";

const _abi = [
  {
    type: "function",
    name: "DYNAMIC_FEE_FLAG",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint24",
        internalType: "uint24",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MAX_SWAP_FEE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint24",
        internalType: "uint24",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "STATIC_FEE_MASK",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint24",
        internalType: "uint24",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "error",
    name: "FeeTooLarge",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60b5610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060475760003560e01c8063ab3d854414604c578063c7a97b4e14606d578063f26ef49d146076575b600080fd5b6055620f424081565b60405162ffffff909116815260200160405180910390f35b6055627fffff81565b6055628000008156fea26469706673582212209f47aa7c380f48f9aa33addb575eecc571d32fd56d5d2adccbdf3baa78edcd8d64736f6c63430008130033";

type SwapFeeLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapFeeLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapFeeLibrary__factory extends ContractFactory {
  constructor(...args: SwapFeeLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SwapFeeLibrary & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapFeeLibrary__factory {
    return super.connect(runner) as SwapFeeLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapFeeLibraryInterface {
    return new Interface(_abi) as SwapFeeLibraryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SwapFeeLibrary {
    return new Contract(address, _abi, runner) as unknown as SwapFeeLibrary;
  }
}
